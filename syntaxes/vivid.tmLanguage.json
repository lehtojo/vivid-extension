{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Vivid",
	"patterns": [
		{ "include": "#template_arguments" },
		{ "include": "#comments" },
		{ "include": "#constants" },
		{ "include": "#higher-priority-expressions" },
		{ "include": "#keywords" },
		{ "include": "#expressions" },
		{ "include": "#primitives" }
	],
	"repository": {
		"template_arguments": {
			"patterns": [
				{
					"match": "(\\w+)\\<([\\w<>,.\\[\\]\\*\\ ]+)\\>",
					"captures": {
						"1": {
							"name": "entity.name.type"
						},
						"2": {
							"patterns": [
								{
									"include": "$self"
								},
								{
									"match": "\\w+",
									"name": "entity.name.type"
								}
							]
						}
					}
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"match": "#\\ *(Todo|Warning|Error)[^\\w].*",
					"description": "Warning/Error",
					"name": "invalid.illegal"
				},
				{
					"match": "'[^']*\\\\(?=')|'[^']*'",
					"name": "string.quoted.double"
				},
				{
					"match": "\\\"[^\"]*\\\\(?=\\\")|\\\"[^\"]*\\\"",
					"name": "string.quoted.double"
				},
				{
					"match": "`[^`]*\\\\(?=`)|`[^`]*`",
					"name": "string.quoted.double"
				},
				{
					"begin": "(^|[^#])###[^#]",
					"end": "###",
					"name": "comment.block"
				},
				{
					"match": "#.*",
					"name": "comment.line"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.numeric.floating-point",
					"match": "\\b((([0-9\\_]+\\.[0-9\\_]*)(e[+-]?[0-9\\_]+)?|\\.?[0-9\\_]+e[+-]?[0-9\\_]+))\\b"
				},
				{
					"name": "constant.numeric.literal",
					"match": "(\\$0[0-9a-f]+)\\b"
				},
				{
					"name": "constant.numeric.dec",
					"match": "\\b((0d[0-9\\_]+)|([0-9\\_]+d?))\\b"
				},
				{
					"name": "constant.numeric.hex",
					"match": "\\b((0[xhb][0-9a-fA-F\\_]+)|([0-9a-fA-F\\_]+[hHb]))\\b"
				}
			]
		},
		"higher-priority-expressions": {
			"patterns": [
				{
					"match": "(as|is not|is) +([\\w\\.]+(?=[^<]))?",
					"description": "as/is -expression",
					"captures": {
						"1": {
							"name": "keyword.control"
						},
						"2": {
							"patterns": [
								{
									"match": "\\w+",
									"name": "entity.name.type"
								}
							]
						}
					}
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control",
					"description": "Keywords",
					"match": "\\b(action|and|or|as|constant|continue|compiles|deinit|else|export|global|false|finally|has|if|import|in|init|inline|is|loop|nameof|mutating|namespace|none|not|open|outline|override|pack|plain|private|protected|public|readable|return|shared|sizeof|strideof|stop|super|this|true|when)\\b"
				},
				{
					"name": "keyword.control",
					"description": "Standard functions",
					"match": "\\b(allocate|deallocate|internal_is|internal_init)\\b"
				}
			]
		},
		"expressions": {
			"patterns": [
				{
					"match": "(\\${0,1}\\w+\\!)\\(",
					"description": "Macro definition or usage",
					"captures": {
						"1": {
							"name": "keyword.control"
						}
					}
				},
				{
					"match": "\\.{0,1}(\\w+)\\ *(\\()",
					"description": "Function call",
					"captures": {
						"1": {
							"name": "entity.name.function"
						}
					}
				},
				{
					"match": "(\\w+)\\ *:\\ *([\\w\\.]+(?=[^<]))?",
					"description": "Variable declaration",
					"captures": {
						"1": {
							"name": "variable.name"
						},
						"2": {
							"patterns": [
								{
									"match": "\\w+",
									"name": "entity.name.type"
								}
							]
						}
					}
				},
				{
					"match": "(\\.)(\\w+)",
					"description": "Member access",
					"captures": {
						"1": {
							"name": "keyword.operator"
						},
						"2": {
							"name": "variable.name"
						}
					}
				},
				{
					"match": "(\\w+)(\\.)",
					"description": "Member access (inverse)",
					"captures": {
						"1": {
							"name": "variable.name"
						},
						"2": {
							"name": "keyword.operator"
						}
					}
				},
				{
					"match": "(?<=[^\\.]\\.)\\(([\\w<>,.\\*\\ ]+)\\)",
					"description": "Dot cast",
					"captures": {
						"1": {
							"patterns": [
								{
									"match": "\\w+",
									"name": "entity.name.type"
								}
							]
						}
					}
				},
				{
					"match": "\\!|\\=|\\+|\\-|\\*|\\/|\\%|\\.|\\&|\\||\\Â¤|\\[|\\]|\\<|\\>|\\|\\>|\\<\\|",
					"description": "Operators",
					"name": "keyword.operator"
				},
				{
					"match": "[ \t]*(\\w+)[ \t]*\\=\\>",
					"description": "Expression variable",
					"captures": {
						"1": {
							"name": "entity.name.function"
						}
					}
				},
				{
					"match": "\\) *(using) ",
					"description": "Using-expression",
					"captures": {
						"1": {
							"name": "keyword.control"
						}
					}

				}
			]
		},
		"primitives": {
			"patterns": [
				{
					"match": "\\b(bool|tiny|small|normal|large|decimal|i8|u8|i16|u16|i32|u32|i64|u64|link)\\b",
					"description": "Primitives",
					"name": "entity.name.type"
				}
			]
		}
	},
	"scopeName": "source.vivid"
}